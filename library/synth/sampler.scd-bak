(
synth: {|freq, gate|

    var aeg;
    var rate, dir;
    var phase, sig, sawrate;
    var numchannels = ~numchannels ?? {1};
    var updateFreq = 15;
    var root = \rootfreq.kr(60.0.midicps,
        spec:ControlSpec(20, 20000, \exp, 0, 60.0.midicps, units:"sampler")
    ).clip(20, 20000);

    var replyid = \bufposreplyid.kr(-1);
    var buf = \buf.kr(0, spec:ControlSpec(units:"buf"));
    var numframes = max(BufFrames.kr(buf), 1);

    var start = \startPos.kr(0, spec: ControlSpec(0, 0.9999, \lin, 0, 0, units:"sampler"));
    var end = \endPos.kr(1, spec: ControlSpec(0, 1, \lin, 0, 1, units:"sampler") );
    var dur;

    rate = freq/root;

    dir = Select.kr(
        \rev.kr(0, spec:ControlSpec(0, 1, \lin, 1, 0, units:"sampler")) > 0.5,
        [1, -1]
    );

    /*
    sawrate = rate * BufSampleRate.kr(buf) / (absdif(start, end) * numframes);
    phase = (LFSaw.ar(sawrate * dir, 1)).range(start, end) * numframes;

    phase = Phasor.ar(
		rate: BufRateScale.kr(buf) * rate, //(1 / numframes * BufRateScale.kr(buf)) * rate,
		start: start * numframes,
		end: end * numframes,
		resetPos: start * numframes
	);
    */

    /*
    aeg = {
        var sustain = sawrate.reciprocal - 0.01;
        var atk = \atk.kr(0.0, spec:InstrControlSpec(0, 8, \lin, 0, 0.01, units:"aeg", sort:0));
        //var sus = sustain * \hold.kr(1, spec: InstrControlSpec(0, 1, \lin, 0, 1, units:"aeg", sort:1));
        var sus = \hold.kr(1, spec: InstrControlSpec(0, 1, \lin, 0, 1, units:"aeg", sort:1));
        var rel = \rel.kr(0.01, spec: InstrControlSpec(0, 8, \lin, 0, 1, units:"aeg", sort:3));

        var ts = \ts.kr(1);
        var curve = [
            \atkcurve.kr(0, spec: InstrControlSpec(-8, 8, \lin, 0, 0, units:"aeg", sort:4)),
            \relcurve.kr(0, spec: InstrControlSpec(-8, 8, \lin, 0, 0, units:"aeg", sort:6))
        ];
        
        var env = Env.linen(
            attackTime:atk,
            sustainTime:sus,
            releaseTime:rel,
            curve:curve
        );

        env.ar(gate: gate, doneAction:Done.freeSelf, timeScale:ts);
    };
    */

    /*
    sig = BufRd.ar(
        numChannels: numchannels.debug("numchannels"),
        bufnum: buf,
        phase: phase,
        loop: 0,
        interpolation: 4 // cubic interpolation
    );
    */


    start = start * numframes;
    end = end * numframes;
    dur = (end - start) / BufSampleRate.ir(buf);

    sig = XPlayBuf.ar(numchannels,
        bufnum: buf,
        rate: BufRateScale.kr(buf) * rate,
        trigger: Impulse.ar(0),
        startPos: start,
        loopDur: dur,
        loop: 1,
        //fadeTime:0.0,
        xFadeTime: 0.01,
    ).poll;

    //sig = sig * aeg.();

    SendReply.kr(Impulse.kr(updateFreq) * (replyid > 0), '/bufpos', [0, phase], replyid);

    sig;
}
)



